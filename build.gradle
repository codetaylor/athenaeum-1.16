buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

// -----------

apply plugin: 'maven-publish'

apply from: 'project.gradle'

def getVersionName = { String workTree ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', "--git-dir=\"${workTree}/.git\"", "--work-tree=\"${workTree}\"", 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

version = getVersionName("${project.projectDir}")
group = 'com.codetaylor.mc.' + project.ext.modid
archivesBaseName = project.ext.modid

println()
println("-------------------------------------------------------------")
println("- Mod Id: " + project.ext.modid)
println("- Version: " + version)
println("- Forge Version: " + project.ext.forge.version)
println("- Mappings: " + project.ext.mappings.channel + " " + project.ext.mappings.version)
println("-------------------------------------------------------------")
println()

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    mappings = project.ext.mappings.channel + "_" + project.ext.mappings.version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                athenaeum {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                athenaeum {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'athenaeum', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                athenaeum {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/maven"
        }
    }
}